{
  "name": "Oraclejet with WebSockets",
  "tagline": "",
  "body": "In this workshop we are going to develop a voting app. This voting app should serve as a tool, for example in the Theory classes of MOD2, where Mr van den Hombergh is able to test the knowledge of the students in form of this app, instead of wasting papers by distributing paper-based quizzes.\r\n\r\nThe teacher creates a question, and a set of answers as options. Each student is able to vote for the answer-option, which is correct according to him/her. The submitted answers are displayed in real time, on a pie-chart.\r\n\r\n### Starting point\r\n\r\nIn order to start with this workshop, please checkout the projects **WebsocketVotingServerWorkshop** and **WebsocketVotingClient** from the GIT repository.\r\n\r\n### Task 1\r\nOpen **votingEndpoint.java** from **WebsocketVotingServerWorkshop**.\r\nInsert the annotations:\r\n```java\r\n@ApplicationScoped \r\n```\r\nand\r\n```java\r\n@ServerEndpoint\r\n```\r\nwith the parameter \"/voting\"\r\nand make sure, that you add the relevant imports.\r\n\r\nSo... lets think... \r\nWhy do we need these *annotations*?\r\n\r\n### Task 2\r\nNext, you have to define a \r\n```java\r\nVotingHandler \r\n```\r\nand annotate it with \r\n```java\r\n@Inject\r\n```\r\nYou can name it for example **sessionHandler.**\r\n\r\n\r\n### Task 3\r\nCreate the methods and the relevant annotations \r\n```java\r\nvoid onOpen()\r\n```\r\nwith the SessionHandler as the parameter\r\nand \r\n```java\r\nvoid onClose()\r\n```\r\nwith the same parameter.\r\n\r\n**Tricky part**: Try to find out, what you need to do with the Session parameter. *A small clue, it has to do with the **sessionHandler**.*\r\n\r\n\r\n### Task 4\r\nNow you have to implement the method \r\n```java\r\nonMessage()\r\n```\r\nwith the parameters **message** of the type *String* and a **Session**.\r\nThis method also needs the annotation \r\n```java\r\nonMessage\r\n```\r\nThe method was named **onMessage** for convenience, because of the annotation.\r\n\r\n### Task 5\r\nTry to get the **Json** from the message.\r\nFor this, the \r\n```java\r\nJsonReader \r\n```\r\nwill be used.\r\nYou can use the code below:\r\n```java\r\nJsonReader reader = Json.createReader(new StringReader(message)) \r\n```\r\n\r\n### Task 6\r\nWith the created reader, you can read the Objects and save them into a \r\n```java\r\nJsonObject\r\n```\r\nwhich may be called \r\n```java\r\njsonMessage\r\n```\r\n\r\n\r\n### Task 7\r\nInsert the following line:\r\n```java\r\nActionEnum action = ActionEnum.valueOf(jsonMessage.getString(\"action\")); \r\n```\r\nThis line of code extracts the action to be carried out in this app.\r\n\r\n\r\n### Task 8\r\nYou may take a look at the **ActionEnum.java** file in the **endpoints** package.\r\n\r\nImplement the following actions regarding the **ACTION ENUM**:\r\n(You may use the cheat-sheet for the JSON format)\r\n```java\r\nSETNAME, \r\nGETROOMLIST,\r\nCREATEROOM, \r\nJOINROOM,  \r\nNEWQUESTION,  \r\nANSWERQUESTION  \r\n```\r\n\r\n### Task 9\r\n**FOR THE EAGER STUDENTS**\r\n\r\nNow you can have a look at the client-side Websocket connections in\r\n*WebSocketsVotingClient/Siteroot/js/viewModels/dashboard.js*\r\n\r\nYou may notice similarities with the server-side web socket implementations.\r\n\r\n## Task 9.1\r\nNow, you can try to implement the new functionality to be able to display the name of the room's creator. \r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}